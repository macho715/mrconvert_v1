다음은 SCT-EMAIL을 온톨로지 관점에서 정밀 정리한 보고서다.
용어는 OWL/RDF 기반을 따랐다. 문장 길이는 간결히 유지했다.
1) 요약
SCT-EMAIL은 물류 커뮤니케이션을 의미 그래프로 표현한다.
핵심 단위는 메시지, 명령, 의도, 프로세스, 공문, 비용이다.
LogiOntology와 클래스·속성 정렬로 상호운용한다.
SHACL, SWRL, SPARQL로 검증·추론·질의를 수행한다.
CIPL·BL 사전통제 흐름과 자연스럽게 결합된다.
2) 상위 모델 정렬
PROV-O: 행위 기록과 책임 추적에 사용한다.
Time Ontology: 일정, DDL, UAE 시간대 정규화에 사용한다.
GS1/EPCIS 개념: 이벤트형 화물 이력에 연결한다.
UN/CEFACT 용어: 선적 문서와 로지스틱스 어휘 정합을 맞춘다.
3) 핵심 클래스 체계
4) 핵심 속성 설계
hasIntent(Communication_Action → Intent)
about(Communication_Action → Logistics_Process)
involves(Logistics_Process → Stakeholder_Role)
refersTo(Communication_Action → Document)
hasAmount(Cost_Item → xsd:decimal)
hasCurrency(Cost_Item → xsd:string)
eventTime(Communication_Action → time:Instant)
projectTag(Communication_Action → xsd:string)
uom(Cost_Item → xsd:string)
requires(Regulation → Document)
5) 공리와 규칙 예시
Email_Message ⊑ Communication_Action
Quick_Message ⊑ Communication_Action
Command ⊑ prov:Activity
Communication_Action ⊑ ∃hasIntent.Intent
Cost_Item ⊑ ∃hasAmount.xsd:decimal
SWRL 예시
Email_Message(?m) ^ hasIntent(?m, request) ^ refersTo(?m, BL)
→ triggers(?m, PreArrival_Check)
6) SHACL 검증 스키마
Email 메시지 필수 항목
sh:NodeShape  targetClass: Email_Message
- property: projectTag       datatype xsd:string   minCount 1
- property: eventTime        datatype time:Instant minCount 1
- property: hasIntent        class    Intent       minCount 1
비용 항목 2자리 소수 규칙
- property: hasAmount datatype xsd:decimal pattern "^[0-9]+(\.[0-9]{2})$"
- property: hasCurrency in [USD, AED, EUR]
7) 명령 모듈의 온톨로지 매핑
8) LogiOntology 연계 방안
LogiOntology:Shipment ⊑ Logistics_Process 로 매핑한다.
PortCall, VesselVisit 를 Logistics_Process 하위로 연결한다.
브리지 속성 예시:
lo:hasPortCallId ↔ projectTag 보조 식별자 매핑
lo:hasMilestone ↔ about 절차 연결
namespace는 lo:로 고정한다. 충돌은 owl:equivalentClass 로 해소한다.
9) CIPL·BL 사전통제 결합
PreArrival_Guard ⊑ Verification_Action 으로 정의한다.
트리거 규칙: BL 누락, CIPL 미제출, ETA 임박 시점.
결과 액션: /reply-note 생성, 담당자 알림, 체크리스트 업데이트.
10) 이벤트 흐름 시나리오
사용자가 /revise를 호출한다.
시스템이 Intent를 고정한다.
Email_Message가 Document를 참조한다.
SHACL로 형식 검증을 수행한다.
규칙이 PreArrival_Guard를 유발한다.
KPI_Record가 TAT를 기록한다.
11) 데이터 직렬화 권장
RDF/Turtle 운영, JSON-LD 외부 연계 사용.
시간은 Asia/Dubai 로 정규화한다. 오프셋을 명시한다.
금액은 두 자리 고정이다. 예: 420.00, 150.00.
TTL 예시
:msg123 a Email_Message ;
  projectTag "HVDC-001" ;
  eventTime "2025-10-19T09:00:00+04:00"^^xsd:dateTime ;
  hasIntent :request ;
  refersTo :docBL8899 ;
  about :procShipmentA .
:cost1 a Cost_Item ;
  hasAmount "420.00"^^xsd:decimal ;
  hasCurrency "USD" ;
  uom "Lot" .
12) KPI와 SPARQL 질의
TAT 측정
SELECT ?project (AVG(?minutes) AS ?avgTATmin)
WHERE {
  ?m a :Email_Message ; :projectTag ?project ;
     :eventTime ?t1 ; :hasIntent :request .
  ?r a :Email_Message ; :projectTag ?project ;
     :eventTime ?t2 ; :hasIntent :inform .
  FILTER (?t2 > ?t1)
  BIND ( (xsd:dateTime(?t2)-xsd:dateTime(?t1)) AS ?delta )
  BIND ( (?delta/60000) AS ?minutes )
}
GROUP BY ?project
Pre-Arrival 미준수 목록
SELECT ?bl ?eta
WHERE {
  ?check a :PreArrival_Guard ; :status "Open" ;
         :refersTo ?bl ; :eta ?eta .
}
ORDER BY ?eta
DEM/DET 합계
SELECT ?project (SUM(xsd:decimal(?amt)) AS ?total)
WHERE {
  ?c a :Cost_Item ; :projectTag ?project ;
     :type ?k ; :hasAmount ?amt .
  FILTER (?k IN ("DEM","DET"))
}
GROUP BY ?project
13) 거버넌스
네임스페이스 버전: sct-email/1.0/, lo/1.0/.
변경 관리: owl:deprecated 적용, 마이그레이션 그래프 유지.
규범 갱신은 /update-lib 로 기록한다. 버전 로그를 남긴다.
14) 보안·감사
PII 마스킹 규칙을 SHACL로 강제한다.
접근 제어는 그래프 레벨 태깅으로 분리한다.
모든 명령 기록은 prov:wasAssociatedWith 로 남긴다.
15) 시스템 배치 권장
트리플 스토어는 ACID 보장 제품을 추천한다.
메시지 버스는 명령 이벤트를 전달한다.
ETL은 JSON-LD를 표준으로 고정한다.
16) 이행 단계
17) 위험 및 대응
HS 코드 8자리 초과 인식 오류 가능성이 높다.
UAE 이중용도 품목은 오검이 잦다.
두 항목은 수동 검증 표시를 유지한다.
표시 예시
🔍 Verification needed 속성을 부여한다.
18) 운영 체크리스트
메시지에 프로젝트 태그가 있는가.
시간은 +04:00 으로 저장되었는가.
비용은 두 자리 소수인가.
문서는 규범과 연결되었는가.
KPI 기록이 생성되었는가.
19) 부록: 매핑 테이블
원하면 TTL 파일 뼈대를 제공하겠다.
샘플 그래프와 SHACL 패키지도 즉시 제공 가능하다.
Confidential – SCT Internal Use
— Recommended Next Commands — (Internal)
/summary ▪ /logi-master ▪ /doccheck