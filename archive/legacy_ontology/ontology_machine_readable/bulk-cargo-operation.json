{
  "meta": {
    "source": "C:\\Users\\minky\\Downloads\\mrconvert_v1\\ONTOLOGY\\BULK CARGO OPERATION.docx",
    "type": "docx",
    "pages": null,
    "parsed_at": "2025-10-19T17:51:46+00:00",
    "ocr": {
      "used": false,
      "engine": "none",
      "lang": null
    }
  },
  "text": "BULK CARGO OPERATION을 ‘온톨로지’로 보기\n현장 용어와 데이터를 한 언어로 묶어, 무엇(Thing)—어디(Location)—언제(Time)—어떻게(Operation)—무엇으로(Resource)—**왜/규정(Compliance)**를 서로 연결하는 지식 그래프로 설계합니다. 아래는 바로 적용 가능한 최소 핵심 스키마와 운영 포인트예요.\n1) 최상위 개념(Top-level Classes)\nCargo: CargoItem, Package/Bundle, Lot\n속성: weight, dimensions(L/W/H), COG(x,y,z), stackable, hazardousNote …\nTransportMeans: Vessel, Barge, Truck, Trailer\n속성: deckStrength, deckArea, coordOrigin, capacity…\nLocation: Port, Terminal, Jetty, DeckZone(구역/그리드), StorageBay, Berth\nOperation:\nLoading/Discharging, Stowage, Lashing/Seafastening, Lifting, Pre-carriage, SeaPassage, Inspection\n상태: Planned → Ready → InProgress → Completed → Verified\nResource:\nEquipment(Crane, Forklift, Spreader, RiggingGear: sling/shackle/beam), Workforce(Rigger, Banksman, Operator)\nDocument: StowagePlan, LashingPlan, StabilityReport, LiftingPlan, MS/JSA, P/L, B/L, Permit\nCondition/Measurement: Weather, SeaState, Wind, Motion(accel g), Clearance\nOrganization/Agent: OFCO, DSV, SCT, Client, Surveyor, Class\nConstraint/Rule: DeckLoadLimit, SWL/ WLL, ClearanceRule, RegulatoryRule\nTime: Instant/Interval(ETA/ETD, Shift), Milestone\n말 그대로, “화물—작업—장비—장소—시간—문서—규정”을 모두 1개의 그래프에서 ‘연결’해 질문이 통과되게 만듭니다.\n2) 핵심 관계(Object Properties)\ncargoLocatedAt(Cargo → DeckZone | StorageBay)\nassignedTo(Cargo → Operation) / produces(Operation → Document)\nsecuredBy(Cargo → RiggingGear) / performedBy(Operation → Workforce|Organization)\nuses(Operation → Equipment) / occursAt(Operation → Location) / scheduledFor(Operation → TimeInterval)\nconstrainedBy(TransportMeans|Operation → Constraint)\nhasMeasurement(… → Measurement) / hasStatus(… → StatusConcept)\n3) 필수 데이터 속성(Data Properties) 예\nweight(kg|t), length/width/height(m), cogX/Y/Z(m)\ndeckStrength(t/m2), radius(m), swl/wll(t)\nwindSpeed(m/s), roll/pitch(deg), accelLong/Trans/Vert(g)\nstartAt/endAt(ISO 8601), docVersion, approvalState\n4) 표준 연계(Interoperability)\n단위: QUDT/UCUM (kg, t, m, deg, m/s²)\n시간: OWL-Time (Instant/Interval)\n측정/센서: SOSA/SSN (가속도, 풍속)\n위치/좌표: GeoSPARQL (DeckZone도 폴리곤/그리드로 모델링)\n어휘/상태표: SKOS (작업상태/허가상태 코드셋)\n근거성: PROV-O (문서가 어떤 작업/데이터에서 파생됐는지)\n표준을 재사용하면 시스템 간 데이터 교환이 편해지고, 단위 오류를 줄입니다.\n5) 규칙/검증(Constraints) — SHACL로 예시\nDeck 접지압: Σ(cargo.weight / contactArea) ≤ deckStrength\nLashing 용량: Σ(WLL × cosθ) ≥ designLoad × safetyFactor\nCrane 반경 SWL: SWL(radius) ≥ liftedWeight × factor\nClearance: cargo.height + grillage ≤ allowableHeight(zone)\n규칙은 SHACL(또는 규칙엔진)로 선언해 “데이터가 들어오는 순간” 자동 검증하게 합니다.\n6) 컴피턴시 질문(이 온톨로지가 반드시 답해야 할 질문)\n현재 선적안(버전 X)에서 DeckZone A의 총 하중과 접지압은 안전한가?\nLashingPlan #123에서 각 슬링의 예상 장력과 WLL 대비 사용률은?\n반경 R에서 선정 크레인의 SWL이 리프트에 충분한가?\nCOG가 높은 화물만 필터해 추가 시추/보강이 필요한 후보는?\n오늘 야간(19:00–07:00) 필요 인력/장비와 공석은?\nSeaState ≥ 5 조건에서 가속도(g) 가정이 바뀌면 어떤 화물의 라싱이 불합격되는가?\n특정 B/L에 포함된 Cargo들의 Stowage 위치/문서/승인 현황은?\nOFCO/DSV/SCT 각각 담당 작업과 책임 경계는 어디까지인가?\n마지막 승인된 StabilityReport와 실제 탑재 데이터(중량/VCG)의 차이는?\n적재 순서 변경 시 크리티컬 경로/대기시간 변화는?\n7) 아주 작은 예시(Turtle)\n@prefix bco:   <https://example.com/bco#> .\n@prefix time:  <http://www.w3.org/2006/time#> .\n@prefix qudt:  <http://qudt.org/schema/qudt/> .\n@prefix unit:  <http://qudt.org/vocab/unit/> .\nbco:CARGO_001 a bco:Cargo ;\n  bco:weight \"18.5\"^^qudt:QuantityValue ;\n  qudt:unit unit:T ;\n  bco:length \"12.0\" ; bco:width \"2.4\" ; bco:height \"2.8\" ;\n  bco:cogX \"6.0\" ; bco:cogY \"1.2\" ; bco:cogZ \"1.4\" ;\n  bco:cargoLocatedAt bco:DeckZone_A ;\n  bco:assignedTo bco:OP_Load_20251019 .\nbco:OP_Load_20251019 a bco:LoadingOperation ;\n  bco:occursAt bco:Vessel_TRUE_Deck ;\n  bco:uses bco:Crane_80T ;\n  bco:scheduledFor bco:Shift_Night_20251019 .\nbco:Shift_Night_20251019 a time:Interval ;\n  time:hasBeginning \"2025-10-19T19:00:00+04:00\" ;\n  time:hasEnd       \"2025-10-20T07:00:00+04:00\" .\n8) SHACL 스케치(간단 아이디어)\nbco:DeckLoadShape a sh:NodeShape ;\n  sh:targetClass bco:DeckZone ;\n  sh:sparql [\n    sh:message \"Deck load exceeds allowable pressure.\" ;\n    sh:select \"\"\"\n      SELECT ?this WHERE {\n        ?this a bco:DeckZone ; bco:deckStrength ?limit .\n        {\n          SELECT ?this (SUM(?w/?area) AS ?pressure)\n          WHERE {\n            ?cargo bco:cargoLocatedAt ?this ; bco:weight ?w ; bco:contactArea ?area .\n          } GROUP BY ?this\n        }\n        FILTER (?pressure > ?limit)\n      }\n    \"\"\" ;\n  ] .\n9) 운영 설계 팁(현장 맞춤)\nID 정책: VSL_TRUE/ZONE-A/2025-10-19/LOT-xxx처럼 사람과 시스템이 같이 읽히는 URI/ID.\nDeckZone 그리드화: 2D 좌표계 기준(Origin, X fwd, Y port)과 격자 크기(예: 1×1 m)를 그래프에 저장.\n문서-데이터 연결: LashingPlan, StabilityReport를 produces/validates 관계로 작업/데이터와 연결.\n버전/승인 추적: PROV-O로 “누가, 언제, 무엇을” 승인/수정했는지 이력 관리.\n상태어휘(SKOS): Planned/Ready/InProgress/OnHold/Completed/Rejected 같은 컨트롤 타워용 코드셋 고정.\n규정 계층화: SOLAS/IMSBC/AD Ports 규정을 Rule 노드로 선언하고, 작업/장비에 constrainedBy로 링크.\n10) 시스템 아키텍처(간단 청사진)\nTriple Store/Graph DB(RDF/OWL) + SHACL Validator\nIngest 파이프라인: CSV/Excel(화물, 장비, 인력, 스케줄) → 매핑(R2RML/ETL) → RDF\nQuery API: SPARQL endpoint + GraphQL façade(현장 앱/대시보드 용)\nRule/Calc: SHACL(SP), 파이프라인 계산(예: 라싱 각도/장력), 결과를 Measurement로 귀속\n문서화: 그래프에서 최신 상태를 끌어와 Stowage/Lashing/Lifting/Logistics Plan 자동 채움\n11) 지금 있는 데이터와의 핏\n당신이 이미 관리하는 화물/선박/장비/인력/환경/스케줄 표는 그대로 쓰되,\n열(Column)마다 어떤 클래스/속성으로 들어갈지 맵핑 테이블만 정하면 됩니다.\n이후부터는 “질문”이 곧 “SPARQL 쿼리”가 되고, 검증은 SHACL이 담당합니다.\n12) 한 줄 요약\n온톨로지는 현장 데이터를 하나의 지식 그래프로 엮어, “안전·용량·일정·책임” 질문에 즉답하게 합니다. 한 번 골격을 세워두면, 선적 변경·야간 교대·기상 변수 같은 변동성에도 빠르게 재검증·재생성할 수 있습니다. 엔진은 단순합니다. **개념(클래스)**를 작게, 관계는 명확하게, 규칙은 선언적으로. 그러면 일은 훨씬 덜 복잡해집니다.",
  "markdown": "__BULK CARGO OPERATION을 ‘온톨로지’로 보기__\n\n현장 용어와 데이터를 한 언어로 묶어, __무엇\\(Thing\\)__—__어디\\(Location\\)__—__언제\\(Time\\)__—__어떻게\\(Operation\\)__—__무엇으로\\(Resource\\)__—\\*\\*왜/규정\\(Compliance\\)\\*\\*를 서로 연결하는 지식 그래프로 설계합니다\\. 아래는 바로 적용 가능한 최소 핵심 스키마와 운영 포인트예요\\.\n\n__1\\) 최상위 개념\\(Top\\-level Classes\\)__\n\n- __Cargo__: CargoItem, Package/Bundle, Lot\n\t- 속성: weight, dimensions\\(L/W/H\\), COG\\(x,y,z\\), stackable, hazardousNote …\n- __TransportMeans__: Vessel, Barge, Truck, Trailer\n\t- 속성: deckStrength, deckArea, coordOrigin, capacity…\n- __Location__: Port, Terminal, Jetty, __DeckZone__\\(구역/그리드\\), StorageBay, Berth\n- __Operation__:\n\t- __Loading/Discharging__, __Stowage__, __Lashing/Seafastening__, __Lifting__, Pre\\-carriage, SeaPassage, Inspection\n\t- 상태: Planned → Ready → InProgress → Completed → Verified\n- __Resource__:\n\t- __Equipment__\\(Crane, Forklift, Spreader, RiggingGear: sling/shackle/beam\\), __Workforce__\\(Rigger, Banksman, Operator\\)\n- __Document__: StowagePlan, LashingPlan, StabilityReport, LiftingPlan, MS/JSA, P/L, B/L, Permit\n- __Condition/Measurement__: Weather, SeaState, Wind, Motion\\(accel g\\), Clearance\n- __Organization/Agent__: OFCO, DSV, SCT, Client, Surveyor, Class\n- __Constraint/Rule__: DeckLoadLimit, SWL/ WLL, ClearanceRule, RegulatoryRule\n- __Time__: Instant/Interval\\(ETA/ETD, Shift\\), Milestone\n\n말 그대로, “화물—작업—장비—장소—시간—문서—규정”을 모두 1개의 그래프에서 ‘연결’해 질문이 통과되게 만듭니다\\.\n\n__2\\) 핵심 관계\\(Object Properties\\)__\n\n- cargoLocatedAt\\(Cargo → DeckZone | StorageBay\\)\n- assignedTo\\(Cargo → Operation\\) / produces\\(Operation → Document\\)\n- securedBy\\(Cargo → RiggingGear\\) / performedBy\\(Operation → Workforce|Organization\\)\n- uses\\(Operation → Equipment\\) / occursAt\\(Operation → Location\\) / scheduledFor\\(Operation → TimeInterval\\)\n- constrainedBy\\(TransportMeans|Operation → Constraint\\)\n- hasMeasurement\\(… → Measurement\\) / hasStatus\\(… → StatusConcept\\)\n\n__3\\) 필수 데이터 속성\\(Data Properties\\) 예__\n\n- weight\\(kg|t\\), length/width/height\\(m\\), cogX/Y/Z\\(m\\)\n- deckStrength\\(t/m2\\), radius\\(m\\), swl/wll\\(t\\)\n- windSpeed\\(m/s\\), roll/pitch\\(deg\\), accelLong/Trans/Vert\\(g\\)\n- startAt/endAt\\(ISO 8601\\), docVersion, approvalState\n\n__4\\) 표준 연계\\(Interoperability\\)__\n\n- __단위__: QUDT/UCUM \\(kg, t, m, deg, m/s²\\)\n- __시간__: OWL\\-Time \\(Instant/Interval\\)\n- __측정/센서__: SOSA/SSN \\(가속도, 풍속\\)\n- __위치/좌표__: GeoSPARQL \\(DeckZone도 폴리곤/그리드로 모델링\\)\n- __어휘/상태표__: SKOS \\(작업상태/허가상태 코드셋\\)\n- __근거성__: PROV\\-O \\(문서가 어떤 작업/데이터에서 파생됐는지\\)\n\n표준을 재사용하면 시스템 간 데이터 교환이 편해지고, 단위 오류를 줄입니다\\.\n\n__5\\) 규칙/검증\\(Constraints\\) — SHACL로 예시__\n\n- __Deck 접지압__: Σ\\(cargo\\.weight / contactArea\\) ≤ deckStrength\n- __Lashing 용량__: Σ\\(WLL × cosθ\\) ≥ designLoad × safetyFactor\n- __Crane 반경 SWL__: SWL\\(radius\\) ≥ liftedWeight × factor\n- __Clearance__: cargo\\.height \\+ grillage ≤ allowableHeight\\(zone\\)\n\n규칙은 __SHACL__\\(또는 규칙엔진\\)로 선언해 “데이터가 들어오는 순간” 자동 검증하게 합니다\\.\n\n__6\\) 컴피턴시 질문\\(이 온톨로지가 반드시 답해야 할 질문\\)__\n\n1. 현재 선적안\\(버전 X\\)에서 __DeckZone A__의 총 하중과 접지압은 안전한가?\n2. __LashingPlan \\#123__에서 각 슬링의 예상 장력과 WLL 대비 사용률은?\n3. 반경 R에서 __선정 크레인__의 SWL이 리프트에 충분한가?\n4. __COG가 높은 화물__만 필터해 추가 시추/보강이 필요한 후보는?\n5. 오늘 야간\\(19:00–07:00\\) __필요 인력/장비__와 공석은?\n6. __SeaState ≥ 5__ 조건에서 가속도\\(g\\) 가정이 바뀌면 어떤 화물의 라싱이 불합격되는가?\n7. 특정 __B/L__에 포함된 Cargo들의 __Stowage 위치/문서/승인 현황__은?\n8. __OFCO/DSV/SCT__ 각각 담당 작업과 책임 경계는 어디까지인가?\n9. 마지막 승인된 __StabilityReport__와 실제 탑재 데이터\\(중량/VCG\\)의 차이는?\n10. 적재 순서 변경 시 __크리티컬 경로/대기시간__ 변화는?\n\n__7\\) 아주 작은 예시\\(Turtle\\)__\n\n@prefix bco:   <https://example\\.com/bco\\#> \\.\n\n@prefix time:  <http://www\\.w3\\.org/2006/time\\#> \\.\n\n@prefix qudt:  <http://qudt\\.org/schema/qudt/> \\.\n\n@prefix unit:  <http://qudt\\.org/vocab/unit/> \\.\n\nbco:CARGO\\_001 a bco:Cargo ;\n\n  bco:weight \"18\\.5\"^^qudt:QuantityValue ;\n\n  qudt:unit unit:T ;\n\n  bco:length \"12\\.0\" ; bco:width \"2\\.4\" ; bco:height \"2\\.8\" ;\n\n  bco:cogX \"6\\.0\" ; bco:cogY \"1\\.2\" ; bco:cogZ \"1\\.4\" ;\n\n  bco:cargoLocatedAt bco:DeckZone\\_A ;\n\n  bco:assignedTo bco:OP\\_Load\\_20251019 \\.\n\nbco:OP\\_Load\\_20251019 a bco:LoadingOperation ;\n\n  bco:occursAt bco:Vessel\\_TRUE\\_Deck ;\n\n  bco:uses bco:Crane\\_80T ;\n\n  bco:scheduledFor bco:Shift\\_Night\\_20251019 \\.\n\nbco:Shift\\_Night\\_20251019 a time:Interval ;\n\n  time:hasBeginning \"2025\\-10\\-19T19:00:00\\+04:00\" ;\n\n  time:hasEnd       \"2025\\-10\\-20T07:00:00\\+04:00\" \\.\n\n__8\\) SHACL 스케치\\(간단 아이디어\\)__\n\nbco:DeckLoadShape a sh:NodeShape ;\n\n  sh:targetClass bco:DeckZone ;\n\n  sh:sparql \\[\n\n    sh:message \"Deck load exceeds allowable pressure\\.\" ;\n\n    sh:select \"\"\"\n\n      SELECT ?this WHERE \\{\n\n        ?this a bco:DeckZone ; bco:deckStrength ?limit \\.\n\n        \\{\n\n          SELECT ?this \\(SUM\\(?w/?area\\) AS ?pressure\\)\n\n          WHERE \\{\n\n            ?cargo bco:cargoLocatedAt ?this ; bco:weight ?w ; bco:contactArea ?area \\.\n\n          \\} GROUP BY ?this\n\n        \\}\n\n        FILTER \\(?pressure > ?limit\\)\n\n      \\}\n\n    \"\"\" ;\n\n  \\] \\.\n\n__9\\) 운영 설계 팁\\(현장 맞춤\\)__\n\n- __ID 정책__: VSL\\_TRUE/ZONE\\-A/2025\\-10\\-19/LOT\\-xxx처럼 사람과 시스템이 같이 읽히는 URI/ID\\.\n- __DeckZone 그리드화__: 2D 좌표계 기준\\(Origin, X fwd, Y port\\)과 격자 크기\\(예: 1×1 m\\)를 그래프에 저장\\.\n- __문서\\-데이터 연결__: LashingPlan, StabilityReport를 __produces/validates__ 관계로 작업/데이터와 연결\\.\n- __버전/승인 추적__: PROV\\-O로 “누가, 언제, 무엇을” 승인/수정했는지 이력 관리\\.\n- __상태어휘\\(SKOS\\)__: Planned/Ready/InProgress/OnHold/Completed/Rejected 같은 컨트롤 타워용 코드셋 고정\\.\n- __규정 계층화__: SOLAS/IMSBC/AD Ports 규정을 Rule 노드로 선언하고, 작업/장비에 constrainedBy로 링크\\.\n\n__10\\) 시스템 아키텍처\\(간단 청사진\\)__\n\n- __Triple Store/Graph DB__\\(RDF/OWL\\) \\+ __SHACL Validator__\n- __Ingest 파이프라인__: CSV/Excel\\(화물, 장비, 인력, 스케줄\\) → 매핑\\(R2RML/ETL\\) → RDF\n- __Query API__: SPARQL endpoint \\+ GraphQL façade\\(현장 앱/대시보드 용\\)\n- __Rule/Calc__: SHACL\\(SP\\), 파이프라인 계산\\(예: 라싱 각도/장력\\), 결과를 Measurement로 귀속\n- __문서화__: 그래프에서 최신 상태를 끌어와 Stowage/Lashing/Lifting/Logistics Plan 자동 채움\n\n__11\\) 지금 있는 데이터와의 핏__\n\n당신이 이미 관리하는 __화물/선박/장비/인력/환경/스케줄 표__는 그대로 쓰되,\n\n- 열\\(Column\\)마다 __어떤 클래스/속성__으로 들어갈지 맵핑 테이블만 정하면 됩니다\\.\n- 이후부터는 “질문”이 곧 “SPARQL 쿼리”가 되고, 검증은 SHACL이 담당합니다\\.\n\n__12\\) 한 줄 요약__\n\n온톨로지는 __현장 데이터를 하나의 지식 그래프__로 엮어, “안전·용량·일정·책임” 질문에 즉답하게 합니다\\. 한 번 골격을 세워두면, 선적 변경·야간 교대·기상 변수 같은 __변동성__에도 빠르게 재검증·재생성할 수 있습니다\\. 엔진은 단순합니다\\. \\*\\*개념\\(클래스\\)\\*\\*를 작게, __관계__는 명확하게, __규칙__은 선언적으로\\. 그러면 일은 훨씬 덜 복잡해집니다\\.\n\n",
  "tables": []
}